/**
 * Example Service API Spec
 * No description available
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { BadRequestError } from '../model/models';
import { CurrencyItem } from '../model/models';
import { ExchangeRateItem } from '../model/models';
import { InternalServerError } from '../model/models';

import { EXCHANGE_RATES_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { ExchangeRatesConfiguration }                                     from '../configuration';


export interface GetRatesRequestParams {
    /** The currency that we want to convert from. */
    ["source"]: string;
    /** The currency that we want to convert to. */
    ["target"]: string;
    /** The starting date of the list of exchange rates (date only, always starting at 00:00 of that day) */
    ["from"]?: string;
    /** The ending date of the list of exchange rates (date only, always ending at 23:59 of that day) */
    ["to"]?: string;
}


@Injectable({
  providedIn: 'root'
})
export class ExchangeHttpService {

    protected basePath = '/serviceName';
    public defaultHeaders = new HttpHeaders();
    public configuration = new ExchangeRatesConfiguration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional() @Inject(EXCHANGE_RATES_BASE_PATH) basePath: string, @Optional() configuration: ExchangeRatesConfiguration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Returns all available currencies.
     * Returns all available currencies.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCurrencies(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<CurrencyItem>>;
    public getCurrencies(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<CurrencyItem>>>;
    public getCurrencies(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<CurrencyItem>>>;
    public getCurrencies(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<CurrencyItem>>(`${this.configuration.basePath}/v1/exchange/currencies`,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    public getCurrenciesUrl(): string {
        return `${this.configuration.basePath}/v1/exchange/currencies`;
    }

    /**
     * Returns the exchange rates for a particular pair of currencies in a given time period.
     * Returns the exchange rates for a particular pair of currencies in a given time period.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRates(requestParameters: GetRatesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<ExchangeRateItem>>;
    public getRates(requestParameters: GetRatesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<ExchangeRateItem>>>;
    public getRates(requestParameters: GetRatesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<ExchangeRateItem>>>;
    public getRates(requestParameters: GetRatesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        const _source = requestParameters["source"];
        if (_source === null || _source === undefined) {
            throw new Error('Required parameter source was null or undefined when calling getRates.');
        }
        const _target = requestParameters["target"];
        if (_target === null || _target === undefined) {
            throw new Error('Required parameter target was null or undefined when calling getRates.');
        }
        const _from = requestParameters["from"];
        const _to = requestParameters["to"];

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (_source !== undefined && _source !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_source, 'source');
        }
        if (_target !== undefined && _target !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_target, 'target');
        }
        if (_from !== undefined && _from !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_from, 'from');
        }
        if (_to !== undefined && _to !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_to, 'to');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<ExchangeRateItem>>(`${this.configuration.basePath}/v1/exchange/rates`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    public getRatesUrl(requestParameters: GetRatesRequestParams): string {
        const _source = requestParameters["source"];
        if (_source === null || _source === undefined) {
            throw new Error('Required parameter source was null or undefined when calling getRates.');
        }
        const _target = requestParameters["target"];
        if (_target === null || _target === undefined) {
            throw new Error('Required parameter target was null or undefined when calling getRates.');
        }
        const _from = requestParameters["from"];
        const _to = requestParameters["to"];
        let queryParameters = new HttpParams({encoder: this.encoder});
        if (_source !== undefined && _source !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_source, 'source');
        }
        if (_target !== undefined && _target !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_target, 'target');
        }
        if (_from !== undefined && _from !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_from, 'from');
        }
        if (_to !== undefined && _to !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_to, 'to');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/v1/exchange/rates${queryString ? `?${queryString}` : ''}`;
    }

}
